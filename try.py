# -*- coding: utf-8 -*-
"""TRY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PyZidn8R2nfLqBGbtKz2sod4BK0-Qqgw
"""

import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import requests # Digunakan untuk mengambil data dari API (misalnya kurs)
import json # Digunakan untuk memproses data JSON dari API

# --- 1. Pengambilan Data ---
print("\n--- 1. Pengambilan Data ---")

# Mengunduh data historis Bitcoin (BTC-USD) dari Yahoo Finance.
df = yf.download('BTC-USD', start='2015-01-01', end='2025-06-24')

df.head()

# --- 2. Pra-pemrosesan Data ---
print("\n--- 2. Pra-pemrosesan Data ---")
data = df[['Close']].values
print(f"Bentuk data harga penutupan sebelum normalisasi: {data.shape}")


scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)
print(f"Bentuk data harga setelah normalisasi: {scaled_data.shape}")
print("Data harga berhasil dinormalisasi ke rentang [0, 1].")

def create_multistep_sequences(data, input_window=60, output_window=7):
    X, y = [], []
    for i in range(len(data) - input_window - output_window):
        X.append(data[i:(i + input_window), 0])
        y.append(data[(i + input_window):(i + input_window + output_window), 0])
    return np.array(X), np.array(y)

INPUT_WINDOW = 60 # 60 hari historis sebagai input untuk prediksi.
OUTPUT_WINDOW = 7 # 7 hari ke depan sebagai target prediksi.

X, y = create_multistep_sequences(scaled_data, INPUT_WINDOW, OUTPUT_WINDOW)

print(f"Bentuk urutan input (X) setelah pembuatan sequences: {X.shape}")
print(f"Bentuk urutan output (y) setelah pembuatan sequences: {y.shape}")
print("Urutan data multi-step berhasil dibuat.")

# Membagi data yang sudah di-sequence menjadi set pelatihan dan pengujian.
train_size = int(0.8 * len(X))
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

print(f"Jumlah sampel pelatihan (X_train): {X_train.shape[0]}")
print(f"Jumlah sampel pengujian (X_test): {X_test.shape[0]}")
print("Data berhasil dibagi menjadi set pelatihan dan pengujian.")

X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

# Menampilkan bentuk akhir X_train dan X_test setelah reshape.
print(f"Bentuk X_train setelah reshape untuk LSTM: {X_train.shape}")
print(f"Bentuk X_test setelah reshape untuk LSTM: {X_test.shape}")
print("Data input berhasil di-reshape untuk model LSTM.")

# --- 3. Pembangunan dan Pelatihan Model LSTM ---
print("\n--- 3. Pembangunan dan Pelatihan Model LSTM ---")

model = Sequential()
model.add(LSTM(64, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dense(OUTPUT_WINDOW))

model.compile(optimizer='adam', loss='mse')

print("Ringkasan Model LSTM:")
model.summary()

print("\nMemulai pelatihan model...")
history = model.fit(X_train, y_train,
                    epochs=50,
                    batch_size=32,
                    validation_split=0.1,
                    verbose=1)
print("Pelatihan model selesai.")

# Import fungsi metrik yang diperlukan dari scikit-learn
from sklearn.metrics import mean_squared_error, mean_absolute_error
import numpy as np # Pastikan numpy juga diimpor untuk np.sqrt

# --- 4. Evaluasi Model ---
print("\n--- 4. Evaluasi Model ---")

# Menghitung metrik evaluasi kinerja model.
# Kode di bawah ini sekarang akan berjalan dengan benar
mse = mean_squared_error(y_test_rescaled, predictions_rescaled)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test_rescaled, predictions_rescaled)

print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"Mean Absolute Error (MAE): {mae:.2f}")

# --- 5. Visualisasi Hasil Prediksi ---
print("\n--- 5. Visualisasi Hasil Prediksi ---")

plt.figure(figsize=(15, 7))
plt.plot(y_test_rescaled[:, 0], label='Harga Aktual (Hari ke-1)')
plt.plot(predictions_rescaled[:, 0], label='Harga Prediksi (Hari ke-1)')
plt.title('Perbandingan Harga Bitcoin Aktual vs. Prediksi (Hari ke-1)')
plt.xlabel('Indeks Waktu (Sampel)')
plt.ylabel('Harga (USD)')
plt.legend()
plt.grid(True)
plt.show()
print("Visualisasi perbandingan harga aktual vs. prediksi selesai.")

# --- 6. Prediksi Harga Bitcoin 7 Hari ke Depan ---
print("\n--- 6. Prediksi Harga Bitcoin 7 Hari ke Depan ---")

# Mengambil 60 hari terakhir dari data yang sudah dinormalisasi.
last_sequence = scaled_data[-INPUT_WINDOW:].reshape(1, INPUT_WINDOW, 1)

# Membuat prediksi 7 hari ke depan menggunakan model.
future_prediction_scaled = model.predict(last_sequence, verbose=0)

future_prices_usd = scaler.inverse_transform(future_prediction_scaled).flatten()

print("Prediksi harga Bitcoin untuk 7 hari ke depan (USD):")
for i, price in enumerate(future_prices_usd):
    print(f"Hari ke-{i+1}: ${price:,.2f}")

# Mengambil kurs USD ke IDR dari API eksternal.
print("\nMengambil kurs USD ke IDR...")
try:
    url = 'https://api.frankfurter.app/latest?from=USD&to=IDR'
    response = requests.get(url)
    response.raise_for_status()
    data_exchange = response.json() # Mengurai respons JSON
    usd_to_idr_rate = data_exchange['rates']['IDR'] # Mengambil kurs IDR
    print(f"Kurs USD ke IDR saat ini: Rp {usd_to_idr_rate:,.2f}")
except requests.exceptions.RequestException as e:
    print(f"Error saat mengambil kurs: {e}. Menggunakan kurs default 1 USD = 15,000 IDR.")
    usd_to_idr_rate = 15000

# Mengonversi prediksi harga dari USD ke IDR.
future_prices_idr = future_prices_usd * usd_to_idr_rate

print("\nPrediksi harga Bitcoin untuk 7 hari ke depan (IDR):")
for i, price in enumerate(future_prices_idr):
    print(f"Hari ke-{i+1}: Rp {price:,.2f}")

print("\n--- Proses selesai ---")